// Project Euler - Problem 12
// Highly divisible triangular number

// The sequence of triangle numbers is generated by adding the natural numbers. So, the 7th triangular number is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55

// The factors of the first seven triangle numbers are:
//  1: 1
//  3: 1, 3
//  6: 1, 2, 3, 6
// 10: 1, 2, 5, 10
// 15: 1, 3, 5, 15
// 21: 1, 3, 7, 21
// 28: 1, 2, 4, 7, 14, 28

// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

// function to find first triangle number to have over five hundred divisors
function firstTriangleNumber() {

  var triangleNum = 1;

  var counter = 2;

  // variable to hold list of current triangle number's divisors
  var divisors;

  // continually loop until the triangle number is found
  while(true) {

    // generate a list of the current triangle number's divisors
    divisors = listDivisors(triangleNum);

    // check whether the length of the list of divisors is over 500
    if (divisors.length > 500) {
      // if so then return the triangle number
      return triangleNum;
    }

    // increment the value of triangleNum and try again
    triangleNum += counter;

    // update the value of the counter
    counter++;
  }
}

// function to generate list of divisors for passed in number
function listDivisors(num) {
  
  // array to hold list of divisors
  var divisors = [];

  // iterate through the values 1 through num/2
  for (var i = 1; i <= num/2; i++) {
    // check whether i is a divisor of num
    if (num % i === 0) {
      // if so then append to list of divisors
      divisors.push(i);
    }
  }

  // append the number itself
  divisors.push(num);

  // return the list of divisors of num
  return divisors;
}

// test
console.log('7th triangle number divisors:', listDivisors(28));
console.log('First triangle number with over 500 divisors:', firstTriangleNumber());

